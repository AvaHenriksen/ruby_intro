<h1>Conditionals</h1>

<p>Previously, we mentioned that Ruby allows us to compare values, and returns <code>true</code> or <code>false</code>:</p>

<div class="highlight"><pre><span></span><span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">2</span>          <span class="c1"># &quot;1 is less than 2&quot;</span>
<span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">1</span>          <span class="c1"># &quot;2 is less than 1&quot;</span>
<span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>         <span class="c1"># &quot;1 is equivalent to 1&quot;</span>
<span class="mi">1</span> <span class="o">==</span> <span class="mi">2</span>         <span class="c1"># &quot;1 is equivalent to 2&quot;</span>
<span class="mi">1</span> <span class="o">!=</span> <span class="mi">1</span>         <span class="c1"># &quot;1 is NOT equivalent to 1&quot;</span>
<span class="mi">1</span> <span class="o">!=</span> <span class="mi">2</span>         <span class="c1"># &quot;1 is NOT equivalent to 2&quot;</span>
</pre></div>

<p>This becomes useful in conjunction with the <code>if</code> statement, which allows us to do things <em>conditionally</em> in our programs, rather than doing them on every run.</p>

<p>Let's see how this works. Locate the file called <code>app/controllers/programs_controller.rb</code> and let's write some code where it says:</p>

<pre>
  def conditionals
    # Your code goes here

    @your_output = "Replace this string with your output"

    render("programs/conditionals.html.erb")
  end
</pre>

First, try this:

<pre>
  def conditionals
    if 1 < 2
      message = "duh"
    end

    @your_output = message

    render("programs/conditionals.html.erb")
  end
</pre>

<div class="well">
  <%= @your_output %>
</div>

<p>Now switch the <code>1 < 2</code> to <code>2 < 1</code> and refresh this page.</p>

<p>Ok, here's the deal with <code>if</code>:</p>

<ul>
  <li>It <strong>must</strong> have a matching <code>end</code>, so just type it before you type anything else and forget it.</li>
  <li>Code that comes between the <code>if</code> and <code>end</code> will only be executed if the expression next to the <code>if</code> evaluates to <code>true</code>.</li>
  <li>If the expression is <code>false</code>, then the code will simply be ignored.</li>
</ul>

<p>You can also have <em>multi-branch</em> <code>if</code> statements:</p>

<pre>
  the_number = rand(100)

  if the_number < 10
    message = "It's going to be your lucky day today"
  elsif the_number > 90
    message = "Don't leave home today"
  else
    message = "It'll be an okay day today"
  end
</pre>

<ul>
  <li>Note that there's no space in <code>elsif</code>.</li>
  <li>The conditions are checked in top-down priority, so even if more than one is true, whichever one is first has its branch executed; the rest are ignored.</li>
  <li>If none are true, the final <code>else</code> fallback branch is executed; but you don't have to have one if you don't want one.</li>
</ul>

<p>Inside a branch of an <code>if</code> statement, you can have as many lines of code as you want -- and you can even have whole other multi-branch if statements, if that's what you need.</p>

<p>Finally, another handy thing to have in your toolbelt are the <strong>logical operators</strong> <code>&&</code> and <code>||</code>. These allow you to combine comparisons; try these:</p>

<pre>
  1 < 2 && 2 < 3 # Is 1 less than 2 AND 2 less than 3? Duh
  1 < 2 && 3 < 2 # Is 1 less than 2 AND 3 less than 2? I guess not
  2 < 1 && 3 < 2 # Is 2 less than 1 AND 3 less than 2? Duh
  1 < 2 || 2 < 3 # Is 1 less than 2 OR 2 less than 3? Yep
  1 < 2 || 3 < 2 # Is 1 less than 2 OR 3 less than 2? I guess so
  2 < 1 || 3 < 2 # Is 2 less than 1 OR 3 less than 2? Duh
</pre>

<p>Basically, <code>&&</code> is stricter than <code>||</code>; both comparisons have to be true in order for the whole statement to be true when combined with <code>&&</code>; either one being true is sufficient for <code>||</code>.</p>

<p>With that, you have all the tools you need to start building some interesting, dynamic applications!</p>
